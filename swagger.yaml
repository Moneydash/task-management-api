openapi: 3.0.0
info:
  title: Task Management API
  description: API for managing tasks and users
  version: 1.0.0

servers:
  - url: /api
    description: API Server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Complete project documentation"
        description:
          type: string
          example: "Write comprehensive documentation for the project"
        status:
          type: string
          enum: [pending, completed]
          example: "pending"
        priority:
          type: string
          enum: [low, medium, high]
          example: "high"
        order:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        assignedUser:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error message"
        error:
          type: string
          example: "Detailed error information"

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '201':
          description: User registered successfully
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully logged in!"
                  access_token:
                    type: string
                    example: "1|abcdefghijklmnopqrstuvwxyz"
                  token_type:
                    type: string
                    example: "Bearer"
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/getTasksByUserId/{user_id}:
    get:
      tags:
        - Tasks
      summary: Get tasks by user ID
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/addTasks:
    post:
      tags:
        - Tasks
      summary: Create a new task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - status
                - priority
                - user_id
              properties:
                title:
                  type: string
                  example: "New Task"
                description:
                  type: string
                  example: "Task description"
                status:
                  type: string
                  enum: [pending, completed]
                  example: "pending"
                priority:
                  type: string
                  enum: [low, medium, high]
                  example: "high"
                user_id:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task has been created successfully!"
                  task:
                    $ref: '#/components/schemas/Task'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/updateTask/{task_id}:
    put:
      tags:
        - Tasks
      summary: Update a task
      security:
        - BearerAuth: []
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task data has been updated successfully!"
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/reorder:
    post:
      tags:
        - Tasks
      summary: Reorder tasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - id
                  - order
                properties:
                  id:
                    type: integer
                    example: 1
                  order:
                    type: integer
                    example: 1
      responses:
        '200':
          description: Tasks reordered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tasks reordered successfully!"
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'

  /tasks/getTasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks (Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/lists:
    get:
      tags:
        - Users
      summary: Get all non-admin users (Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of non-admin users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'